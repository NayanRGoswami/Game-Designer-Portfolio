{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar util = require('util');\n\nvar path = require('path');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar request = require('request');\n\nvar _ = require('lodash');\n\nfunction UploadTask(auth, config, options, fileStats) {\n  if (!options.file) {\n    throw 'Missing file';\n  }\n\n  this._createdAt = new Date();\n  this._file = options.file;\n  this._config = config;\n  options = this.validateOptions(options); // Build request\n\n  var headers = {};\n\n  if (auth.type === 'oauth2') {\n    headers = {\n      Authorization: 'Bearer ' + auth.token\n    };\n  }\n\n  var timer;\n  this._req = request.post({\n    url: this._config['BASE_API_URL'] + this._config['UPLOAD_ENDPOINT'],\n    headers: headers\n  }, function (err, response, body) {\n    var body;\n\n    try {\n      body = JSON.parse(response.body);\n    } catch (e) {\n      this.emit('error', 'Response parsing error');\n    }\n\n    if (err) {\n      this.emit('error', 'Connection error');\n    } else {\n      if (timer) {\n        clearInterval(timer);\n      }\n\n      if (response.statusCode === 201) {\n        if (body && body.uid) {\n          this.emit('progress', 100);\n          pollStatus.call(this, body.uid);\n        } else {\n          this.emit('error', 'Unknown error');\n        }\n      } else {\n        if (body && body.detail) {\n          this.emit('error', body.detail);\n        }\n      }\n    }\n  }.bind(this));\n\n  var formData = this._req.form();\n\n  if (auth.type === 'token') {\n    formData.append('token', auth.token);\n  }\n\n  formData.append('modelFile', fs.createReadStream(this._file));\n  formData.append('name', options.name);\n  formData.append('description', options.description);\n  formData.append('private', options.private);\n  formData.append('password', options.password);\n  formData.append('isPublished', options.isPublished);\n  formData.append('options', options.options);\n\n  for (var i = 0, l = options.tags.length; i < l; i++) {\n    formData.append('tags', options.tags[i]);\n  }\n\n  for (var i = 0, l = options.tags.length; i < l; i++) {\n    formData.append('categories', options.categories[i]);\n  }\n\n  if (options.license) {\n    formData.append('license', options.license);\n  } // Polling sent bytes\n  // https://github.com/request/request/issues/941\n\n\n  timer = setInterval(function () {\n    var percent = Math.min(100, this._req.req.connection.bytesWritten / fileStats.size * 100);\n    this.emit('progress', percent);\n  }.bind(this), 500);\n}\n\nUploadTask.prototype.validateOptions = function validateOptions(options) {\n  var validOptions = _.clone(options);\n\n  var defaults = {\n    name: 'Model',\n    description: '',\n    tags: [],\n    categories: [],\n    private: 'false',\n    password: '',\n    license: '',\n    isPublished: 'false',\n    options: '{}'\n  }; // Use filename as default name\n\n  if (!validOptions.name) {\n    var ext = path.extname(validOptions.file);\n    validOptions.name = path.basename(validOptions.file, ext);\n  }\n\n  validOptions = _.defaults(validOptions, defaults);\n  validOptions = _.pick(validOptions, _.keys(defaults));\n\n  if (typeof validOptions.private !== 'string') {\n    validOptions.private = (!!validOptions.private).toString();\n  }\n\n  if (typeof validOptions.isPublished !== 'string') {\n    validOptions.isPublished = (!!validOptions.isPublished).toString();\n  }\n\n  if (!_.isArray(validOptions.tags)) {\n    validOptions.tags = [];\n  }\n\n  if (!_.isArray(validOptions.categories)) {\n    validOptions.categories = [];\n  }\n\n  if (typeof validOptions.options !== 'string') {\n    validOptions.options = JSON.stringify(validOptions.options);\n  }\n\n  return validOptions;\n};\n\nfunction pollStatus(uid) {\n  var pollUrl = this._config['BASE_API_URL'] + this._config['POLL_ENDPOINT'];\n  var url = pollUrl.replace('{uid}', uid) + '?t=' + +new Date();\n  request(url, function onPollResponse(err, response, body) {\n    if (err) {\n      setTimeout(function pollRetry() {\n        pollStatus.call(this, uid);\n      }.bind(this), this._config['INTERVAL'] * 1000);\n    }\n\n    var data;\n\n    try {\n      data = JSON.parse(body);\n    } catch (e) {\n      this.emit('error', 'Response parsing error');\n    }\n\n    if (data && data.status && data.status.processing) {\n      switch (data.status.processing) {\n        case 'SUCCEEDED':\n          var modelUrl = this._config['BASE_SERVER_URL'] + this._config['MODEL_URL'];\n          this.emit('success', modelUrl.replace('{uid}', uid));\n          break;\n\n        case 'FAILED':\n          this.emit('error', 'Processing failed');\n          break;\n\n        default:\n          setTimeout(function pollRetry() {\n            pollStatus.call(this, uid);\n          }.bind(this), this._config['INTERVAL'] * 1000);\n      }\n    } else {\n      // In case response has no status\n      // (example: {\"detail\": \"Enhance your calm.\"})\n      setTimeout(function pollRetry() {\n        pollStatus.call(this, uid);\n      }.bind(this), this._config['INTERVAL'] * 1000);\n    }\n  }.bind(this));\n}\n\nutil.inherits(UploadTask, EventEmitter);\nmodule.exports = UploadTask;","map":null,"metadata":{},"sourceType":"script"}